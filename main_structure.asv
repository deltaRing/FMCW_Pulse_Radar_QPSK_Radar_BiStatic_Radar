addpath Algorithm
addpath PassiveRadarConf
addpath RadarConf
addpath TargetConf

QPSK = QPSKRadarStructure();
N = 3000;
R = 1000;  % Backward
Taxis = linspace(0, N / QPSK.Fs, N); 
Raxis = QPSK.c * Taxis;

delay_t = randperm(R, 4);
[Sref, Sindex] = BiRadarDirectEcho2(QPSK);

delay = Sindex;
Ssurv = zeros(1, N); 

Sref  = Sref(delay-R+1:delay+N);

Clutter1 = PointTarget([0, 3000, 1000] + abs(randn([1, 3])) * 1000, [10 10 0] * 10, 10);
Clutter2 = PointTarget([0, 3000, 1000] + [0 1 0] * 1000, [10 5 0] * 10, 10);
Clutter3 = PointTarget([0, 3000, 1000] + abs(randn([1, 3])) * 1000, randn(1, 3) * 10, 10);
Clutter4 = PointTarget([0, 3000, 1000] + abs(randn([1, 3])) * 1000, randn(1, 3) * 10, 10);
Clutter5 = PointTarget([0, 3000, 1000] + abs(randn([1, 3])) * 1000, randn(1, 3) * 10, 10);
Target   = PointTarget([0, 3000, 1000], [10 10 0], 10);

[Echo1, delayIndex1, Velo1] = BiRadarEcho3(QPSK, Clutter1);
[Echo2, delayIndex2, Velo2] = BiRadarEcho3(QPSK, Clutter2);
[Echo3, delayIndex3, Velo3] = BiRadarEcho3(QPSK, Clutter3);
[Echo4, delayIndex4, Velo4] = BiRadarEcho3(QPSK, Clutter4);
[Echo5, delayIndex5, Velo5] = BiRadarEcho3(QPSK, Clutter5);
[EchoT, delayIndexT, VeloT] = BiRadarEcho3(QPSK, Target);
delay1 = delayIndex1 - delay;
delay2 = delayIndex2 - delay;
delay3 = delayIndex3 - delay;
delay4 = delayIndex4 - delay;
delay5 = delayIndex5 - delay;
delayT = delayIndexT - delay;
delays = [delay1 
            delay2 
            delay3 
            delay4 
            delay5 
            delayT];
Echo   = [Echo1(:,1).';
            Echo2(:,1).'; 
            Echo3(:,1).'; 
            Echo4(:,1).'; 
            Echo5(:,1).'; 
            EchoT(:,1).'];

AllEcho = Echo1(delay - delays(1) + 1: delay - delays(1) + N, :) + ...
     Echo2(delay - delays(2) + 1: delay - delays(2) + N, :); % + ...
    % Echo3(delay - delays(3) + 1: delay - delays(3) + N, :) + ...
    % Echo4(delay - delays(4) + 1: delay - delays(4) + N, :) + ...
    % Echo5(delay - delays(5) + 1: delay - delays(5) + N, :) + ...
    % EchoT(delay - delays(6) + 1: delay - delays(6) + N, :);

% 最大探测速度
Vmax = QPSK.Lambda / 4 / QPSK.PRI / QPSK.PulseNum;
Doppler_Axis = linspace(-Vmax, Vmax, 512);
% 相对参考信号距离
Rmax = 1/QPSK.Fs * (N+R) * 3e8;
Range_Axis = linspace(0, Rmax, R+N);

output = CorFFT2D(awgn([AllEcho; zeros([R, QPSK.PulseNum])], 10), awgn(Sref, 10));
figure(1000)
mesh(linspace(1, QPSK.PulseNum, QPSK.PulseNum), Range_Axis, abs(fftshift(output)))
figure(1001)
mesh(Doppler_Axis, Range_Axis, abs(fftshift(fft(output, 512, 2))))

disp(norm(Clutter1.Position))
disp(norm(Clutter2.Position))
disp(Velo1)
disp(Velo2)

% for ii = 1:size(Echo, 1)
%     signal = Echo(ii, :);
%     signal = signal(delay - delays(ii) + 1: delay - delays(ii) + N);
%     Ssurv  = Ssurv + signal;
% end
% 
% y = CorFFT(awgn([Ssurv zeros([1, R])], 1), awgn(Sref, 1));
% figure(1)
% plot(abs(y))
% 
% S_eca = ECA(Ssurv, Sref, R, N);
% y = CorFFT(awgn([S_eca zeros([1, R])], 1), awgn(Sref, 1));
% figure(2)
% plot(abs(y))
